package com.appababba.product_catalog_api.model; // Data model package

import jakarta.persistence.*; // JPA annotations (Entity, Id, etc.)
import java.util.Objects; // For implementing equals and hashCode

@Entity // Marks this class as a JPA entity (maps to a database table)
@Table(name = "products") // Specifies the table name in the database (optional if class name matches)
public class Product {

    // Note: This is a standard JPA entity using manual getters/setters, etc. (No Lombok)

    @Id // Marks this field as the primary key for the table
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Configures the ID to be auto-generated by the database (auto-increment)
    private Long id;

    @Column(nullable = false) // Maps to a column, cannot be null in the database
    private String name;

    private String description; // Maps to a column, nullable by default

    @Column(nullable = false) // Cannot be null in the database
    private Double price;

    // No-argument constructor (required by JPA)
    public Product() {
    }

    // Constructor including all fields (useful for creating instances)
    public Product(Long id, String name, String description, Double price) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.price = price;
    }

    // Standard Getters and Setters follow...

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Double getPrice() {
        return price;
    }

    public void setPrice(Double price) {
        this.price = price;
    }

    // Standard equals() and hashCode() implementation (important for entity management)
    // Compares objects based on their field values.
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Product product = (Product) o;
        // Use Objects.equals for null-safe comparison
        return Objects.equals(id, product.id) &&
               Objects.equals(name, product.name) &&
               Objects.equals(description, product.description) &&
               Objects.equals(price, product.price);
    }

    @Override
    public int hashCode() {
        // Generates a hash code based on the fields (used in hash-based collections like HashSet, HashMap)
        return Objects.hash(id, name, description, price);
    }

    // Standard toString() implementation (useful for logging/debugging)
    @Override
    public String toString() {
        return "Product{" +
               "id=" + id +
               ", name='" + name + '\'' +
               ", description='" + description + '\'' +
               ", price=" + price +
               '}';
    }
}